<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hell</title>
    <url>/2023/12/16/hell/</url>
    <content><![CDATA[<h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="第一章-Python-基础"><a href="#第一章-Python-基础" class="headerlink" title="第一章 Python 基础"></a>第一章 Python 基础</h2><h4 id="1、Python中的常用的6种值（数据）类型"><a href="#1、Python中的常用的6种值（数据）类型" class="headerlink" title="1、Python中的常用的6种值（数据）类型"></a>1、Python中的常用的6种值（数据）类型</h4><h4 id="有-Number、String、List、Tuple、Set、Dictionary，具体如下"><a href="#有-Number、String、List、Tuple、Set、Dictionary，具体如下" class="headerlink" title="有 Number、String、List、Tuple、Set、Dictionary，具体如下"></a>有 Number、String、List、Tuple、Set、Dictionary，具体如下</h4><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>数字（Number）</strong></td>
<td>整数（int）、浮点数（float）、复数（complex）、布尔（bool）</td>
<td>整数（int），如：10，-20；浮点数（float），如：13.14、-13.14；<strong>复数（comflex），如：4+3j，以j 结尾表示复数</strong>；布尔（bool），如：True 1，False 0;</td>
</tr>
<tr>
<td><strong>字符串（String）</strong></td>
<td>描述文本的一种数据类型</td>
<td>字符串（String）由任意数量的字符组成；</td>
</tr>
<tr>
<td><strong>列表（List）</strong></td>
<td><strong>有序</strong>的<strong>可变</strong>序列</td>
<td>Python中使用最频繁的数据类型，可<strong>有序</strong>记录一堆数据；</td>
</tr>
<tr>
<td><strong>元组（Tuple）</strong></td>
<td><strong>有序</strong>的<strong>不可变</strong>序列</td>
<td>可有序记录一堆<strong>不可变</strong>的Python数据集合；</td>
</tr>
<tr>
<td><strong>集合（Set）</strong></td>
<td><strong>无序</strong>的<strong>不重复</strong>集合</td>
<td>可无序记录一堆<strong>不重复</strong>的Python数据集合；</td>
</tr>
<tr>
<td><strong>字典（Dictionary）</strong></td>
<td><strong>无序Key-Value</strong>集合</td>
<td>可无序记录一推Key-Value型的Python数据集合</td>
</tr>
</tbody></table>
<h4 id="2、String-字符串"><a href="#2、String-字符串" class="headerlink" title="2、String 字符串"></a>2、String 字符串</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">又称文本，是由任意数量的字符如中文、英文、各类符号、数字等组成。所以叫做字符的串。</span><br><span class="line">Python中，字符串需要用双引号（&quot;）包围起来，被引号包围起来的，都是字符串。</span><br><span class="line">如：&quot;Python&quot;；</span><br></pre></td></tr></table></figure>



<h4 id="3、注释的分类"><a href="#3、注释的分类" class="headerlink" title="3、注释的分类"></a>3、注释的分类</h4><ul>
<li><p>单行注释：以<strong>“#” 开头</strong>，中间一个“<strong>空格</strong>”，右边的文字当作说明，而不是真正要执行的程序，起辅助说明作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我是单行注释</span></span><br><span class="line"><span class="built_in">print</span>（<span class="string">&quot;hello&quot;</span>）</span><br></pre></td></tr></table></figure></li>
<li><p>多行注释：以 一对三个双引号 引起来的内容（””” 注释内容 “””）来说明一段代码的作用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我是多行注释</span></span><br><span class="line"><span class="string">第二行</span></span><br><span class="line"><span class="string">第三行</span></span><br><span class="line"><span class="string">print(666)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>（<span class="string">&quot;hello&quot;</span>）</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4、什么是变量"><a href="#4、什么是变量" class="headerlink" title="4、什么是变量"></a>4、什么是变量</h4><ul>
<li>变量就是在程序运行时，记录数据用的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">演示Python 中变量的相关操作</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 定义一个变量，用来记录钱包余额</span></span><br><span class="line">money = <span class="number">50</span></span><br><span class="line"><span class="comment"># 通过print 语句，输出变量记录的内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;钱包还有：&quot;</span>, money)</span><br><span class="line"><span class="comment"># 买了冰淇淋，花费了10 元</span></span><br><span class="line">money = money - <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;买了冰激凌后，钱包还有:&quot;</span>, money, <span class="string">&quot;元&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>格式</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">变量名 = 变量值</span><br></pre></td></tr></table></figure></li>
<li><p>特征</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">变量的值是可以改变的</span><br></pre></td></tr></table></figure></li>
<li><p>print 语句如何输出多份内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">print（内容1, 内容2, 内容3, ……, 内容n）</span><br></pre></td></tr></table></figure></li>
<li><p>Python 中如何做减法</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用符号 “—” 即可完成减法运算；</span><br><span class="line">拓展：+ 、 - 、 * 、 / </span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5、数据类型"><a href="#5、数据类型" class="headerlink" title="5、数据类型"></a>5、数据类型</h4><ul>
<li><p>type（）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">可以通过type()语句来得到数据的类型：</span><br><span class="line">语法：</span><br><span class="line">type(被查看类型的数据)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在print语句中，直接输出类型信息</span></span><br><span class="line"><span class="comment"># 打印值 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="string">&quot;字符串&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用变量存储type()的结果（返回值）：</span></span><br><span class="line">string_type = <span class="built_in">type</span>(<span class="string">&quot;字符串&quot;</span>)</span><br><span class="line"><span class="comment"># 打印值 &lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="built_in">print</span>(string_type)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6、数据类型转换"><a href="#6、数据类型转换" class="headerlink" title="6、数据类型转换"></a>6、数据类型转换</h4><ul>
<li><p>为什么要转换类型</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">数据类型转换，将会是我们以后经常使用的功能。如：</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 从文件中读取的数字，默认是字符串，我们需要转换成数据类型；</span><br><span class="line"><span class="bullet">*</span> 后续学习的input()语句，默认结果是字符串，若需要数字也需要转换；</span><br><span class="line"><span class="bullet">*</span> 将数字转换成字符串用以写出到外部系统；</span><br><span class="line"><span class="bullet">*</span> 等等</span><br></pre></td></tr></table></figure></li>
<li><p>常见的转换语句</p>
<table>
<thead>
<tr>
<th>语句（函数）</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>int(x)</td>
<td>将x 转换为一个整数</td>
</tr>
<tr>
<td>float(x)</td>
<td>将x 转换为一个浮点数</td>
</tr>
<tr>
<td>str(x)</td>
<td>将对象x 转换为字符串</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="7、标识符"><a href="#7、标识符" class="headerlink" title="7、标识符"></a>7、标识符</h4><ul>
<li><p>什么是标识符</p>
<p>在Python 程序中，我们可以给很多东西起名字，比如：</p>
<ul>
<li>变量的名字</li>
<li>方法的名字</li>
<li>类的名字，等等</li>
</ul>
<p>这些名字，我们把它统一的称之为标识符，用来做内容的标识。</p>
<p>所以，标识符：</p>
<p>是用户在编程的时候所使用的一系列名字，用于给变量、类、方法等命名；</p>
</li>
</ul>
<h5 id="标识符命名规则"><a href="#标识符命名规则" class="headerlink" title="标识符命名规则"></a>标识符命名规则</h5><p><strong>1、内容限定</strong></p>
<p>标识符命名中，只允许出现：</p>
<ul>
<li><p>英文</p>
</li>
<li><p>中文</p>
</li>
<li><p>数字</p>
</li>
<li><p>下划线（_）</p>
</li>
</ul>
<p>这四类元素。</p>
<p>其余任何内容都不被允许；</p>
<p>注意：</p>
<p>（1）不推荐使用中文；</p>
<p>（2）数字是不可以开头</p>
<p><strong>2、大小写敏感</strong></p>
<p>以定义变量为例：</p>
<p>Andy=”安迪1”</p>
<p>andy=”安迪2”</p>
<p>字母a的大写和小写，是完全能够区分的。</p>
<p><strong>3、不可使用关键字</strong></p>
<p>Python中一系列单词，称之为关键字，关键字在Python中都有特定用途，我们不可以使用我们作为标识符</p>
<p><img src="Python.assets/image-20230811231200835.png" alt="image-20230811231200835"></p>
<p>注意：关键字也区分大小写；</p>
<h5 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h5><ul>
<li>变量名</li>
<li>类名</li>
<li>方法名</li>
</ul>
<p>不同的标识符，有不同的规范；</p>
<p><strong>1、变量的命名规范</strong></p>
<ul>
<li>见名知意<ul>
<li>明了：尽量做到，看到名字，就知道是什么意思；</li>
<li>简洁：尽量在确保“明了”的前提下，减少名字的长度；</li>
</ul>
</li>
<li>下划线命名法<ul>
<li>多个单词组合变量名，要试用下划线做分隔；</li>
</ul>
</li>
<li>英文字母全小写<ul>
<li>命名变量中的英文字母，应全部小写；</li>
</ul>
</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h5 id="1、掌握字面量的含义？"><a href="#1、掌握字面量的含义？" class="headerlink" title="1、掌握字面量的含义？"></a>1、掌握字面量的含义？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 代码中,被写在代码中的固定值，称之为字面量；</span><br></pre></td></tr></table></figure>

<h5 id="2、注释的作用？"><a href="#2、注释的作用？" class="headerlink" title="2、注释的作用？"></a>2、注释的作用？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 注释是代码中的解释型语句，用来对代码内容进行注解，注释不会被程序执行；</span><br></pre></td></tr></table></figure>

<h5 id="3、使用什么语句可以查看数据类型？"><a href="#3、使用什么语句可以查看数据类型？" class="headerlink" title="3、使用什么语句可以查看数据类型？"></a>3、使用什么语句可以查看数据类型？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> type()</span><br></pre></td></tr></table></figure>

<h5 id="4、如下代码，name-type变量可以存储变量name的类型信息，是因为？"><a href="#4、如下代码，name-type变量可以存储变量name的类型信息，是因为？" class="headerlink" title="4、如下代码，name_type变量可以存储变量name的类型信息，是因为？"></a>4、如下代码，name_type变量可以存储变量name的类型信息，是因为？</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;字符串&quot;</span></span><br><span class="line">name_type = <span class="built_in">type</span>(name)</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 因为type()语句会给出结果（返回值）</span><br></pre></td></tr></table></figure>

<h5 id="5、变量有类型嘛？"><a href="#5、变量有类型嘛？" class="headerlink" title="5、变量有类型嘛？"></a>5、变量有类型嘛？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 在python中，变量是没有数据类型的，但是它存储的数据是有类型的；</span><br></pre></td></tr></table></figure>

<h5 id="6、任意类型都可以转换成字符串？字符串可以随意转换成数字？"><a href="#6、任意类型都可以转换成字符串？字符串可以随意转换成数字？" class="headerlink" title="6、任意类型都可以转换成字符串？字符串可以随意转换成数字？"></a>6、任意类型都可以转换成字符串？字符串可以随意转换成数字？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 任意类型都可以转换成字符串,但字符串转换成数字时，字符串内必须只有数字才可以；</span><br></pre></td></tr></table></figure>

<h5 id="7、浮点数转整数会丢失什么？"><a href="#7、浮点数转整数会丢失什么？" class="headerlink" title="7、浮点数转整数会丢失什么？"></a>7、浮点数转整数会丢失什么？</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 丢失精度，也就是小数部分</span><br></pre></td></tr></table></figure>

<h4 id="8、标识符"><a href="#8、标识符" class="headerlink" title="8、标识符"></a>8、标识符</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 什么是标识符？</span><br><span class="line"><span class="bullet">	-</span> 用户编写代码时,对变量、类、方法等编写的名字，叫做标识符；</span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">* 标识符的命名规则</span></span><br><span class="line"><span class="code">	- 内容限定（中文、英文、数字、下划线）</span></span><br><span class="line"><span class="code">	- 大小写敏感</span></span><br><span class="line"><span class="code">	- 不可使用关键字</span></span><br><span class="line"><span class="code">	</span></span><br><span class="line"><span class="code">* 变量的命名规范？</span></span><br><span class="line"><span class="code">	- 见名知意</span></span><br><span class="line"><span class="code">	- 下划线命名法</span></span><br><span class="line"><span class="code">	- 英文字母全小写</span></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>hexo test</title>
    <url>/2024/09/03/hexo-test/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/03/softTest/</url>
    <content><![CDATA[<p>layout: post<br>title: hexo test<br>date: 2024-09-03 01:12:03<br>tags:</p>
<h1 id="软件测试"><a href="#软件测试" class="headerlink" title="软件测试"></a>软件测试</h1><h2 id="Day-01"><a href="#Day-01" class="headerlink" title="Day 01"></a>Day 01</h2><h3 id="Day-01-1"><a href="#Day-01-1" class="headerlink" title="## Day 01"></a>## Day 01</h3><h3 id="00-今日目标"><a href="#00-今日目标" class="headerlink" title="00 今日目标"></a>00 今日目标</h3><ul>
<li>能复述软件测试的定义</li>
<li>能说出 7 种测试分类的区别</li>
<li>能说出质量模型的重点 5 项</li>
<li>能说出测试流程的6个步骤</li>
<li>能说出测试模板 8 个要素</li>
</ul>
<h3 id="01-认识软件及测试"><a href="#01-认识软件及测试" class="headerlink" title="01 认识软件及测试"></a>01 认识软件及测试</h3><h4 id="什么是软件"><a href="#什么是软件" class="headerlink" title="什么是软件"></a>什么是软件</h4><ul>
<li>软件：控制计算机硬件工作的工具</li>
</ul>
<h4 id="软件基本组成"><a href="#软件基本组成" class="headerlink" title="软件基本组成"></a>软件基本组成</h4><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230522120009628.png" alt="image-20230522120009628"></p>
<h4 id="软件产生过程"><a href="#软件产生过程" class="headerlink" title="软件产生过程"></a>软件产生过程</h4><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230522120410989.png" alt="image-20230522120410989"></p>
<h4 id="什么是软件测试"><a href="#什么是软件测试" class="headerlink" title="什么是软件测试"></a>什么是软件测试</h4><ul>
<li><p>软件测试：使用技术手段验证软件是否满足使用需求</p>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230522120627373.png" alt="image-20230522120627373"></p>
</li>
</ul>
<h4 id="软件测试目的"><a href="#软件测试目的" class="headerlink" title="软件测试目的"></a>软件测试目的</h4><ul>
<li><p>减少软件缺陷（bug），保障软件质量！</p>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230522120855468.png" alt="image-20230522120855468"></p>
</li>
</ul>
<h3 id="02-测试主流技能"><a href="#02-测试主流技能" class="headerlink" title="02 测试主流技能"></a>02 测试主流技能</h3><h5 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h5><ul>
<li>主要验证程序的功能是否满足需求。</li>
</ul>
<h5 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h5><ul>
<li>使用代码或工具代替手工，对项目进行测试。</li>
<li>工具实现/代码实现</li>
</ul>
<h5 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h5><ul>
<li>使用代码或工具对服务端提供的接口进行测试，验证接口是否访问正常。</li>
<li>工具实现/代码实现</li>
</ul>
<h5 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h5><ul>
<li>模拟多人使用软件，查找服务器缺陷。</li>
<li>工具实现/代码实现</li>
</ul>
<h3 id="03-常见的测试分类"><a href="#03-常见的测试分类" class="headerlink" title="03 常见的测试分类"></a>03 常见的测试分类</h3><h4 id="按测试阶段"><a href="#按测试阶段" class="headerlink" title="按测试阶段"></a>按测试阶段</h4><ul>
<li>单元测试：针对程序源代码进行测试；</li>
<li>集成测试：针对程序接口进行测试；</li>
<li>系统测试：针对程序功能、非功能进行测试；</li>
<li>验收测试：使用不同用户（内测、公测）进行测试；</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230525211837340.png" alt="image-20230525211837340"></p>
<h4 id="按代码可见度划分"><a href="#按代码可见度划分" class="headerlink" title="按代码可见度划分"></a>按代码可见度划分</h4><ul>
<li>黑盒测试：不关注源代码，针对程序UI功能进行测试；</li>
<li>灰盒测试：针对程序部分代码进行测试（接口）；</li>
<li>白盒测试：针对程序源代码进行测试；</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230525212104577.png" alt="image-20230525212104577"></p>
<h3 id="04-测试模型"><a href="#04-测试模型" class="headerlink" title="04 测试模型"></a>04 测试模型</h3><h4 id="质量模型"><a href="#质量模型" class="headerlink" title="质量模型"></a>质量模型</h4><ul>
<li>衡量一个优秀软件的维度；</li>
<li>8个方面：<strong>功能性、性能、兼容性、易用性、安全</strong>、可靠性、可维护性、可移植性；</li>
<li>前 5 项为重要方面</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230525212925545.png" alt="image-20230525212925545"></p>
<h5 id="功能性"><a href="#功能性" class="headerlink" title="功能性"></a>功能性</h5><ul>
<li>功能数量</li>
<li>功能正确实现</li>
<li>错误处理情况</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230525213249189.png" alt="image-20230525213249189"></p>
<h5 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h5><ul>
<li>服务器每秒处理请求数</li>
<li>服务器硬件配置是否满足</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526155707253.png" alt="image-20230526155707253"></p>
<h5 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h5><ul>
<li><p>浏览器</p>
</li>
<li><p>操作系统</p>
</li>
<li><p>手机</p>
</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160049458.png" alt="image-20230526160049458"></p>
<h5 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h5><ul>
<li>简洁</li>
<li>友好</li>
<li>流畅</li>
<li>美观</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160151881.png" alt="image-20230526160151881"></p>
<h5 id="可靠性"><a href="#可靠性" class="headerlink" title="可靠性"></a>可靠性</h5><ul>
<li>无响应</li>
<li>卡顿</li>
<li>死机</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160429925.png" alt="image-20230526160429925"></p>
<h5 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h5><ul>
<li>传输加密</li>
<li>存储加密</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160623537.png" alt="image-20230526160623537"></p>
<h5 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h5><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160756949.png" alt="image-20230526160756949"></p>
<h5 id="可维护性"><a href="#可维护性" class="headerlink" title="可维护性"></a>可维护性</h5><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526160904703.png" alt="image-20230526160904703"></p>
<h3 id="05-软件测试流程"><a href="#05-软件测试流程" class="headerlink" title="05 软件测试流程"></a>05 软件测试流程</h3><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526163814003.png" alt="image-20230526163814003"></p>
<h4 id="需求评审"><a href="#需求评审" class="headerlink" title="需求评审"></a>需求评审</h4><ul>
<li>确保各部门需求理解一致；</li>
</ul>
<h4 id="计划编写"><a href="#计划编写" class="headerlink" title="计划编写"></a>计划编写</h4><ul>
<li>测什么、谁来测、怎么测；</li>
</ul>
<h4 id="用例设计"><a href="#用例设计" class="headerlink" title="用例设计"></a>用例设计</h4><ul>
<li>验证项目是否符合需求的操作文档；</li>
</ul>
<h4 id="用例执行"><a href="#用例执行" class="headerlink" title="用例执行"></a>用例执行</h4><ul>
<li>项目模块开发完成，开始执行用例文档实施测试；</li>
</ul>
<h4 id="缺陷管理"><a href="#缺陷管理" class="headerlink" title="缺陷管理"></a>缺陷管理</h4><ul>
<li>对缺陷进行管理的过程；</li>
</ul>
<h4 id="测试报告"><a href="#测试报告" class="headerlink" title="测试报告"></a>测试报告</h4><ul>
<li>实施测试结果文档；</li>
</ul>
<h3 id="06-测试用例"><a href="#06-测试用例" class="headerlink" title="06 测试用例"></a>06 测试用例</h3><h4 id="什么是用例"><a href="#什么是用例" class="headerlink" title="什么是用例"></a>什么是用例</h4><ul>
<li>用例：用例使用的案例；</li>
</ul>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526164223454.png" alt="image-20230526164223454"></p>
<h4 id="什么是测试用例"><a href="#什么是测试用例" class="headerlink" title="什么是测试用例"></a>什么是测试用例</h4><ul>
<li>是为测试项目而设计的执行文档；</li>
</ul>
<h4 id="用例的作用"><a href="#用例的作用" class="headerlink" title="用例的作用"></a>用例的作用</h4><ul>
<li>防止漏测；</li>
<li>实施测试的标准；</li>
</ul>
<h4 id="用例的编写格式"><a href="#用例的编写格式" class="headerlink" title="用例的编写格式"></a>用例的编写格式</h4><p>8 大要素</p>
<ul>
<li><strong>用例编号</strong>：项目 _ 模块 _ 编号；</li>
<li><strong>用例标题</strong>：预期结果（测试点）；</li>
<li><strong>项目/模块</strong>：所属项目或模块；</li>
<li><strong>优先级</strong>：表示用例的重要程度或者影响力P0~P4（P0最高），用户使用频率最高的模块；</li>
<li><strong>前置条件</strong>：要执行此条用例，有哪些前置操作；</li>
<li><strong>测试步骤</strong>：描述操作步骤；</li>
<li><strong>测试数据</strong>：操作的数据，没有的话可以为空；</li>
<li><strong>预期结果</strong>：期望达到的结果；</li>
</ul>
<h4 id="用例练习"><a href="#用例练习" class="headerlink" title="用例练习"></a>用例练习</h4><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526170430411.png" alt="image-20230526170430411"></p>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230526170506138.png" alt="image-20230526170506138"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、能复述软件测试的定义</span><br><span class="line"><span class="bullet">	*</span> </span><br><span class="line"></span><br><span class="line">2、能说出 7 种测试分类的区别</span><br><span class="line"><span class="bullet">	*</span> 阶段划分</span><br><span class="line"><span class="bullet">		-</span> 单元测试 ： 针对源代码进行测试</span><br><span class="line"><span class="bullet">		-</span> 集成测试 ： 针对接口进行测试</span><br><span class="line"><span class="bullet">		-</span> 系统测试 ： 针对功能和非功能进行测试</span><br><span class="line"><span class="bullet">		-</span> 验收测试 ： 内测、公测</span><br><span class="line"><span class="bullet">    *</span> 代码可见度划分</span><br><span class="line"><span class="bullet">    	-</span> 黑盒测试 ： 不关注源代码对功能测试（系统测试）</span><br><span class="line"><span class="bullet">    	-</span> 灰盒测试 ： 针对接口进行测试（集成测试）</span><br><span class="line"><span class="bullet">    	-</span> 白盒测试 ： 针对源代码进行测试（单元测试）</span><br><span class="line"><span class="bullet">    *</span> 专项</span><br><span class="line"><span class="bullet">    	-</span> 性能测试</span><br><span class="line"><span class="bullet">    	-</span> 安全</span><br><span class="line">3、能说出质量模型的重点 5 项</span><br><span class="line"><span class="bullet">	*</span> 功能</span><br><span class="line"><span class="bullet">	*</span> 性能</span><br><span class="line"><span class="bullet">	*</span> 兼容</span><br><span class="line"><span class="bullet">	*</span> 易用</span><br><span class="line"><span class="bullet">	*</span> 安全</span><br><span class="line"></span><br><span class="line">4、能说出测试流程的 6 个步骤</span><br><span class="line"><span class="bullet">	*</span> 需求评审</span><br><span class="line"><span class="bullet">		-</span> 角色</span><br><span class="line"><span class="bullet">			*</span> 产品经理</span><br><span class="line"><span class="bullet">			*</span> 开发</span><br><span class="line"><span class="bullet">			*</span> 测试</span><br><span class="line"><span class="bullet">        -</span> 目的</span><br><span class="line"><span class="bullet">        	*</span> 需求理解一致</span><br><span class="line"><span class="bullet">        	*</span> 知道被测项目有哪些功能模块</span><br><span class="line"><span class="bullet">	*</span> 测试计划</span><br><span class="line"><span class="bullet">		-</span> 测什么</span><br><span class="line"><span class="bullet">		-</span> 谁来测</span><br><span class="line"><span class="bullet">		-</span> 怎么测</span><br><span class="line"><span class="bullet">	*</span> 用例设计</span><br><span class="line"><span class="bullet">	*</span> 用例执行</span><br><span class="line"><span class="bullet">	*</span> 缺陷管理</span><br><span class="line"><span class="bullet">	*</span> 测试报告</span><br><span class="line">5、能说出测试模板 8 个要素</span><br><span class="line"><span class="bullet">	*</span> 测试编号 ：项目简称<span class="emphasis">_项目简称_</span>编号</span><br><span class="line"><span class="bullet">	*</span> 用例标题 ： 预期结果（测试点）</span><br><span class="line"><span class="bullet">	*</span> 项目/模块 ： 用例所属项目或模块</span><br><span class="line"><span class="bullet">	*</span> 优先级 ： P0 -P4（P0 最高）</span><br><span class="line"><span class="bullet">	*</span> 前置条件/预置条件 ： 操作步骤之前的操作</span><br><span class="line"><span class="bullet">	*</span> 测试步骤 ： 执行用例步骤</span><br><span class="line"><span class="bullet">	*</span> 测试数据 ： 执行步骤中的重点数据</span><br><span class="line"><span class="bullet">	*</span> 预期结果 ： 用例执行结果 + 不同角色隐形结果</span><br></pre></td></tr></table></figure>






<h2 id="Day-02"><a href="#Day-02" class="headerlink" title="Day 02"></a>Day 02</h2><h3 id="00-学习目标"><a href="#00-学习目标" class="headerlink" title="00 学习目标"></a>00 学习目标</h3><ul>
<li>能对穷举场景设计测试点；</li>
<li>能对限定边界规则设计测试点；</li>
<li>能对多条件依赖关系进行设计测试点；</li>
<li>能对项目业务进行设计测试点；</li>
</ul>
<h4 id="01-等价类划分法"><a href="#01-等价类划分法" class="headerlink" title="01 等价类划分法"></a>01 等价类划分法</h4><h5 id="说明-分类-步骤"><a href="#说明-分类-步骤" class="headerlink" title="说明 | 分类 | 步骤"></a>说明 | 分类 | 步骤</h5><p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230601110948291.png" alt="image-20230601110948291"></p>
<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul>
<li>针对：需要大量数据测试输入，但是没法穷举测试的地方<ul>
<li>输入框</li>
<li>下拉列表</li>
<li>单选复选框</li>
</ul>
</li>
<li>典型代表：页面的输入框类测试</li>
</ul>
<h4 id="边界值分析法"><a href="#边界值分析法" class="headerlink" title="边界值分析法"></a>边界值分析法</h4><h4 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h4><h4 id="场景法"><a href="#场景法" class="headerlink" title="场景法"></a>场景法</h4><h4 id="错误推测法"><a href="#错误推测法" class="headerlink" title="错误推测法"></a>错误推测法</h4><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h4 id="缺陷编写"><a href="#缺陷编写" class="headerlink" title="缺陷编写"></a>缺陷编写</h4>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/09/03/SpringBoot/</url>
    <content><![CDATA[<h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="03-整合第三方技术"><a href="#03-整合第三方技术" class="headerlink" title="03 整合第三方技术"></a>03 整合第三方技术</h3><ul>
<li><p>整合JUnit</p>
</li>
<li><p>整合MyBatis</p>
</li>
<li><p>整合MyBatis-Puls</p>
</li>
<li><p>整合Druid</p>
</li>
</ul>
<h4 id="01-整合JUnit"><a href="#01-整合JUnit" class="headerlink" title="01 整合JUnit"></a>01 整合JUnit</h4><ul>
<li><p>SpringBoot 整合JUnit</p>
</li>
<li><p>范例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04ApplicationTests</span> &#123;</span><br><span class="line">    <span class="comment">// 1、注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 2、执行要测试的对象对应的方法</span></span><br><span class="line">        bookService.save();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>名称：@SpringBootTest</p>
</li>
<li><p>类型：测试类注解</p>
</li>
<li><p>位置：测试类定义上方</p>
</li>
<li><p>作用：设置JUnit加载的SpringBoot启动类</p>
</li>
</ul>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、导入测试对应的starter</span><br><span class="line"><span class="bullet">*</span> 2、测试类使用@SpringBootTest 修饰</span><br><span class="line"><span class="bullet">*</span> 3、使用自动装配的形式添加要测试的对象</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 1、测试类如果存在于引导类所在包或子包中无需指定引导类；</span><br><span class="line"><span class="bullet">*</span> 2、测试类如果不存在于引导类所在的包或子包中需要通过claddes属性指定引导类；</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="02-整合MyBatis"><a href="#02-整合MyBatis" class="headerlink" title="02 整合MyBatis"></a>02 整合MyBatis</h4><ul>
<li><p>1、pom.xml 导入对应的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1、导入对应的starter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>2、yml 配置相关信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2、配置相关信息</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/yf1</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>3、数据层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>4、测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot05MybatisApplicationTests</span> &#123;</span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">		System.out.println(bookDao.getById(<span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>步骤</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、创建新模块，选择Spring初始化，并配置模块相关基础信息；</span><br><span class="line"><span class="bullet">*</span> 2、选择当前模块需要使用的技术集（MyBatis、MySQL）；</span><br><span class="line"><span class="bullet">*</span> 3、设置数据源参数；</span><br><span class="line"><span class="bullet">*</span> 4、定义数据层接口与映射配置；</span><br><span class="line"><span class="bullet">*</span> 5、测试类中注入dao 接口，测试功能；</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、勾选MyBatis 技术，也就是导入MyBatis 对应的starter；</span><br><span class="line"><span class="bullet">*</span> 2、数据库连接相关信息转换配置；</span><br><span class="line"><span class="bullet">*</span> 3、数据库SQL 映射需要添加@Mapper 被容器识别到；</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 1、MySQL 8.X 驱动强制要求设置时区；</span><br><span class="line"><span class="bullet">	*</span> 修改url，添加serverTimezone设定，可设置为UTC；</span><br><span class="line"><span class="bullet">	*</span> 修改MySQL数据库时区指令；</span><br><span class="line"><span class="code">		set global time_zone = &#x27;+8:00&#x27;;</span></span><br><span class="line"><span class="code">		set time_zone = &#x27;+8:00&#x27;;</span></span><br><span class="line"><span class="code">		flush privileges;</span></span><br><span class="line"><span class="code">* 2、驱动类过时，提醒更换为 com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>



<h4 id="03-整合MyBatis-Plus"><a href="#03-整合MyBatis-Plus" class="headerlink" title="03 整合MyBatis-Plus"></a>03 整合MyBatis-Plus</h4><ul>
<li><p>MyBatis-Plus 与MyBatis 区别</p>
<ul>
<li>导入坐标不同</li>
<li>数据层实现简化</li>
</ul>
</li>
<li><p>步骤</p>
<p>1、手动添加SpringBoot整合Mybatis-plus 的坐标，可以通过mvnrepository 获取</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、定义数据层接口与映射配置，继承BaseMapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、其他同SpringBoot 整合MyBatis（略）</p>
<h6 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于SpringBoot中未收录MyBatis-Plus 的坐标版本，需要指定对应的Version</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、手工添加MyBatis—Plus对应的starter；</span><br><span class="line"><span class="bullet">*</span> 2、数据层接口使用BaseMapper 简化开发；</span><br><span class="line"><span class="bullet">*</span> 3、需要使用的第三方技术无法通过勾选确定时，需要手工添加坐标；</span><br></pre></td></tr></table></figure>



<h4 id="04-整合Druid"><a href="#04-整合Druid" class="headerlink" title="04 整合Druid"></a>04 整合Druid</h4><ul>
<li><p>导入Druid对应的starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>变更Druid的配置方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 2 配置Druid</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/yf1</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure></li>
<li><p>整合任意第三方技术</p>
<ul>
<li><p>导入对应的starter</p>
</li>
<li><p>配置对应的设置或采用默认配置</p>
</li>
</ul>
</li>
</ul>
<h5 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、整合Druid 需要导入Druid 对应的starter；</span><br><span class="line"><span class="bullet">*</span> 2、根据Druid 提供的配置方式进行配置；</span><br><span class="line"><span class="bullet">*</span> 3、整合第三方技术通用方式</span><br><span class="line"><span class="bullet">	*</span> 导入对应的starter；</span><br><span class="line"><span class="bullet">	*</span> 根据提供的配置格式，配置非默认值对应的配置项；</span><br></pre></td></tr></table></figure>





<h3 id="04-基于SpringBoot-的SSMP整合案例"><a href="#04-基于SpringBoot-的SSMP整合案例" class="headerlink" title="04 基于SpringBoot 的SSMP整合案例"></a>04 基于SpringBoot 的SSMP整合案例</h3><h4 id="01-SSMP整合案例分析"><a href="#01-SSMP整合案例分析" class="headerlink" title="01 SSMP整合案例分析"></a>01 SSMP整合案例分析</h4><ul>
<li>实体类开发——使用Lombok 快速制作实体类；</li>
<li>Dao 开发——整合MyBatisPlus，制作数据层测试类；</li>
<li>Service 开发——基于MyBatisPlus 进行增量开发，制作业务层测试类；</li>
<li>Controller 开发——基于Restful开发，使用PostMan测试接口功能；</li>
<li>Controller 开发——前后端开发协议制作；</li>
<li>页面开发——基于VUE+ElementUI 制作，前后端联调，页面数据处理，页面消息处理；<ul>
<li>列表、新增、修改、删除、分页、查询；</li>
</ul>
</li>
<li>项目异常处理；</li>
<li>按条件查询——页面功能调整、Controller 修正功能、Service 修改功能；</li>
</ul>
<h4 id="02-实体类开发"><a href="#02-实体类开发" class="headerlink" title="02 实体类开发"></a>02 实体类开发</h4><ul>
<li><p>Lombok，一个Java 类库，提供了一组注解，简化POJO 实体类；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>lombok版本由SpringBoot 提供，无需指定版本；</p>
</li>
<li><p>常用注解： @Data</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>为当前实体类在编译期设置对应的get / set 方法，toString 方法，hashCode方法，equals方法等；</p>
</li>
</ul>
<h4 id="03-数据层开发"><a href="#03-数据层开发" class="headerlink" title="03 数据层开发"></a>03 数据层开发</h4><ul>
<li><p>技术实现方案</p>
<ul>
<li>MyBatisPlus </li>
<li>Druid</li>
</ul>
</li>
<li><p>导入MyBatisPlus 与Druid 对应的Starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置数据源与MyBatisPlus 对应的基础配置（id 生成策略使用数据库自增策略）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/yf1?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tb1_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure></li>
<li><p>继承BaseMapper 并指定泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>制作测试类测试结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookDao.selectById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.insert(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据abc&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookDao.updateById(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        bookDao.deleteById(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookDao.selectList(<span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>为方便调试可以开启MyBatisPlus 的日志</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-1-数据层开发——分页功能"><a href="#3-1-数据层开发——分页功能" class="headerlink" title="3.1 数据层开发——分页功能"></a>3.1 数据层开发——分页功能</h5><ul>
<li><p>分页操作需要设定分页对象IPage</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>IPage对象中封装了分页操作中的所有数据</p>
<ul>
<li>数据</li>
<li>当前页码值</li>
<li>每页数据总量</li>
<li>最大页码值</li>
<li>数据总量</li>
</ul>
</li>
<li><p>分页操作实在MyBatisPlus 的常规操作基础上增强得到，<strong>内部是动态的拼写SQL语句</strong>，因此需要增强对应的功能，使用MyBatisPlus 拦截器实现；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MPConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 1、定义MP 拦截器</span></span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 2、添加具体的拦截器</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-2-数据层开发——条件查询功能"><a href="#3-2-数据层开发——条件查询功能" class="headerlink" title="3.2 数据层开发——条件查询功能"></a>3.2 数据层开发——条件查询功能</h5><ul>
<li><p>使用QueryWrapper 对象封装查询条件，推荐使用LambdaQueryWrapper 对象，所有查询操作封装成方法调用；</p>
<p>QueryWrapper </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetBy</span><span class="params">()</span>&#123;</span><br><span class="line">    QueryWrapper&lt;Book&gt; qw = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">    qw.like(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    bookDao.selectList(qw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>LambdaQueryWrapper</strong> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetBy1</span><span class="params">()</span>&#123;</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.like(Book::getName,<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    bookDao.selectList(lqw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>支持动态拼写查询条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetByCondition</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Spring&quot;</span>;</span><br><span class="line">    <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    lqw.like(Strings.isNotEmpty(name),Book::getName,<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    bookDao.selectPage(page,lqw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、SSMP 案例制作流程解析</span><br><span class="line"><span class="bullet">	*</span> 先开发基础CRUD功能，做一层测一层；</span><br><span class="line"><span class="bullet">	*</span> 调通页面，确认异步提交成功后，制作所有功能；</span><br><span class="line"><span class="bullet">	*</span> 添加分页功能与查询功能；</span><br><span class="line"><span class="bullet">*</span> 2、创建项目</span><br><span class="line"><span class="bullet">	*</span> 勾选SpringMVC与MySQL坐标；</span><br><span class="line"><span class="bullet">	*</span> 修改配置文件为yml格式；</span><br><span class="line"><span class="bullet">	*</span> 设置端口为80方便访问；</span><br><span class="line"><span class="bullet">*</span> 3、实体类制作</span><br><span class="line"><span class="bullet">	*</span> 使用lombok 简化开发</span><br><span class="line"><span class="bullet">		*</span> 导入lombok 无需指定版本，由SpringBoot 提供版本；</span><br><span class="line"><span class="bullet">		*</span> @Data 注解</span><br><span class="line"><span class="bullet">*</span> 4、数据层开发</span><br><span class="line"><span class="bullet">	*</span> 手工导入starter 坐标（2个）；</span><br><span class="line"><span class="bullet">	*</span> 配置数据源与MyBatisPlus 对应的配置；</span><br><span class="line"><span class="bullet">	*</span> 开发Dao 接口（继承BaseMapper）；</span><br><span class="line"><span class="bullet">	*</span> 制作测试类测试Dao功能是否有效；</span><br><span class="line"><span class="bullet">	*</span> 使用配置方式开启日志，设置日志输出方式为标准输出；</span><br><span class="line"></span><br><span class="line"><span class="bullet">	*</span> 使用IPage 封装分页数据；</span><br><span class="line"><span class="bullet">	*</span> 分页操作依赖MyBatisPlus 分页拦截器实现功能；</span><br><span class="line"><span class="bullet">	*</span> 借助MyBatisPlus 日志查阅执行SQL语句；</span><br><span class="line"></span><br><span class="line"><span class="bullet">	*</span> 使用QueryWrapper 对象封装查询条件；</span><br><span class="line"><span class="bullet">	*</span> 推荐使用LambdaQueryWrapper 对象；</span><br><span class="line"><span class="bullet">	*</span> 所有查询操作封装成方法调用；</span><br><span class="line"><span class="bullet">	*</span> 条件支持动态条件拼装；</span><br></pre></td></tr></table></figure>



<h4 id="04-业务层开发"><a href="#04-业务层开发" class="headerlink" title="04 业务层开发"></a>04 业务层开发</h4><ul>
<li><p>Server 层接口定义 与 <strong>数据层接口</strong> 定义具有<strong>较大区别</strong>，不要混用；</p>
<p>数据层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">selectByUserNameAndPassword(String username, String password);</span><br></pre></td></tr></table></figure>

<p>业务层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">login(String username, String password);</span><br></pre></td></tr></table></figure></li>
<li><p>接口定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    Boolean <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line">    Boolean <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">    List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectList(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>测试类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTestCase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(bookService.getById(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据aaa&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据bbb&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据ccc&quot;</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book.setId(<span class="number">8</span>);</span><br><span class="line">        book.setType(<span class="string">&quot;测试数据abc&quot;</span>);</span><br><span class="line">        book.setName(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        book.setDescription(<span class="string">&quot;测试数据123&quot;</span>);</span><br><span class="line">        bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.delete(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetPage</span><span class="params">()</span>&#123;</span><br><span class="line">        IPage&lt;Book&gt; page = bookService.getPage(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="4-1-业务层开发——快速开发"><a href="#4-1-业务层开发——快速开发" class="headerlink" title="4.1 业务层开发——快速开发"></a>4.1 业务层开发——快速开发</h5><ul>
<li><p>快速开发方案</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、使用MyBatisPlus 提供有业务层通用接口（IService<span class="language-xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span>）与业务层通用实现类（ServiceImpl<span class="language-xml">&lt;M,T&gt;</span>;</span><br><span class="line">2、在通用类基础上做功能重载或功能追加；</span><br><span class="line">3、注意重载时不要覆盖原始操作，避免原始提供的功能丢失；</span><br></pre></td></tr></table></figure></li>
<li><p>接口定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">  	<span class="comment">// 追加的操作与原始操作通过名称区分，功能类似</span></span><br><span class="line">    Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    Boolean <span class="title function_">insert</span><span class="params">(Book book)</span>;</span><br><span class="line">    Boolean <span class="title function_">modify</span><span class="params">(Book book)</span>;</span><br><span class="line">    Book <span class="title function_">get</span><span class="params">(Integer id)</span>;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实现类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>追加的操作的接口实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">insert</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">modify</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        bookDao.selectPage(page,<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 1、Service 接口名称定义成业务名称，并与Dao 接口名称进行区分；</span><br><span class="line"><span class="bullet">*</span> 2、制作测试类测试Service 功能是否有效；</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 1、使用通用接口（IService<span class="language-xml"><span class="tag">&lt;<span class="name">T</span>&gt;</span></span>）快速开发Service；</span><br><span class="line"><span class="bullet">*</span> 2、使用通用实现类（ServiceImpl<span class="language-xml">&lt;M,T&gt;</span>）快速开发ServiceImpl；</span><br><span class="line"><span class="bullet">*</span> 3、可以在通用接口基础上做功能重载或功能追加；</span><br><span class="line"><span class="bullet">*</span> 4、注意重载时不要覆盖原始操作，避免原始提供的功能丢失；</span><br></pre></td></tr></table></figure>

<h4 id="05-表现层开发"><a href="#05-表现层开发" class="headerlink" title="05 表现层开发"></a>05 表现层开发</h4><h5 id="5-1-表现层"><a href="#5-1-表现层" class="headerlink" title="5.1 表现层"></a>5.1 表现层</h5><ul>
<li><p>基于Restful 进行表现层接口开发。</p>
</li>
<li><p>使用Postman 测试表现层接口功能。</p>
</li>
<li><p>功能测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getPage(currentPage,pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表现层消息一致性处理</p>
<ul>
<li><p>设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为前后端数据协议</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表现层接口统一返回值类型结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,bookService.list());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.save(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.modify(book));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(bookService.delete(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,bookService.getById(id));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 分页</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,bookService.getPage(currentPage,pageSize));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="5-2-前后端协议联调"><a href="#5-2-前后端协议联调" class="headerlink" title="5.2 前后端协议联调"></a>5.2 前后端协议联调</h5><ul>
<li><p>前后端分离结构设计中页面归属前端服务器</p>
</li>
<li><p>单体工程中页面放置在resources 目录下的static 目录中（建议执行clean）</p>
</li>
<li><p>前端发送异步请求axios，调用后端接口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">	axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">		<span class="comment">// console.log(res.data);</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-3-添加、修改等"><a href="#5-3-添加、修改等" class="headerlink" title="5.3 添加、修改等"></a>5.3 添加、修改等</h5><ul>
<li><p>弹出添加窗口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line">handleCreate() &#123;</span><br><span class="line">    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>清除数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置表单</span></span><br><span class="line">resetForm() &#123;</span><br><span class="line">    <span class="built_in">this</span>.formData = &#123;&#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line">handleCreate() &#123;</span><br><span class="line">    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 打开时清空数据</span></span><br><span class="line">    <span class="built_in">this</span>.resetForm();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    axios.post(<span class="string">&quot;/books&quot;</span>,<span class="built_in">this</span>.formData).then((res)=&gt;&#123;</span><br><span class="line">        <span class="comment">// 判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag)&#123;</span><br><span class="line">            <span class="comment">// 1、关闭弹层</span></span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">&quot;添加失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="keyword">finally</span>(()=&gt;&#123;</span><br><span class="line">        <span class="comment">// 2、重新加载数据</span></span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line">handleDelete(row) &#123;</span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前信息，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;type:<span class="string">&quot;info&quot;</span>&#125;).then(()=&gt;&#123;</span><br><span class="line">        axios.delete(<span class="string">&quot;/books/&quot;</span>+row.id).then((res)=&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.data.flag)&#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.success(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="keyword">finally</span>(()=&gt;&#123;</span><br><span class="line">            <span class="comment">// 2、重新加载数据</span></span><br><span class="line">            <span class="built_in">this</span>.getAll();</span><br><span class="line">        &#125;)</span><br><span class="line">            &#125;).<span class="keyword">catch</span>(()=&gt;&#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.info(<span class="string">&quot;取消操作&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//修改</span></span><br><span class="line">handleEdit() &#123;</span><br><span class="line">    axios.put(<span class="string">&quot;/books&quot;</span>,<span class="built_in">this</span>.formData).then((res)=&gt;&#123;</span><br><span class="line">        <span class="comment">// 判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag)&#123;</span><br><span class="line">            <span class="comment">// 1、关闭弹层</span></span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">&quot;修改失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="keyword">finally</span>(()=&gt;&#123;</span><br><span class="line">        <span class="comment">// 2、重新加载数据</span></span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    &#125;)</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-4-业务消息一致性处理"><a href="#5-4-业务消息一致性处理" class="headerlink" title="5.4 业务消息一致性处理"></a>5.4 业务消息一致性处理</h5><ul>
<li><p>对异常进行统一处理，出现异常后，返回指定信息；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拦截所有的异常信息</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">doException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        <span class="comment">// 通知运维</span></span><br><span class="line">        <span class="comment">// 通知开发</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="string">&quot;服务器故障，请稍后在试&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改表现层返回结果的模型类，封装出现异常后对应的信息</p>
<ul>
<li><p>flag：false</p>
</li>
<li><p>Data: null</p>
</li>
<li><p>消息（msg）： 要显示的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">// 新增的信息提示</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">R</span><span class="params">(Boolean flag, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>可以在表现层Controller 中进行消息统一处理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(flag, flag ? <span class="string">&quot;添加成功^_^&quot;</span> : <span class="string">&quot;添加失败-_-!&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>页面消息处理，没有传递消息加载默认消息，传递消息后加载指定消息；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前操作是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">flag</span>)&#123;</span><br><span class="line">            <span class="comment">// 1、关闭弹层</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 2、重新加载数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>目的：国际化</p>
</li>
</ul>
<h5 id="5-5-分页功能"><a href="#5-5-分页功能" class="headerlink" title="5.5 分页功能"></a>5.5 分页功能</h5><ul>
<li><p>页面使用el 分页组件添加分页功能；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--分页组件--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">class</span>=<span class="string">&quot;pagiantion&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		@<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:current-page</span>=<span class="string">&quot;pagination.currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:page-size</span>=<span class="string">&quot;pagination.pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">		<span class="attr">:total</span>=<span class="string">&quot;pagination.total&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>定义分页组件需要使用的数据并将数据绑定到分页组件中；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">pagination</span>: &#123; <span class="comment">// 分页相关模型数据</span></span><br><span class="line">               <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">               <span class="attr">pageSize</span>:<span class="number">10</span>, <span class="comment">// 每页显示的记录数</span></span><br><span class="line">               <span class="attr">total</span>:<span class="number">0</span> <span class="comment">// 总记录数</span></span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>分页查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>,bookService.getPage(currentPage,pageSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>加载分页数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>分页页码值切换</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切换页码</span></span><br><span class="line"><span class="title function_">handleCurrentChange</span>(<span class="params">currentPage</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改页码值为当前选中的页码值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = currentPage;</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-6-删除功能维护"><a href="#5-6-删除功能维护" class="headerlink" title="5.6 删除功能维护"></a>5.6 删除功能维护</h5><ul>
<li><p>对查询结果进行校验，如果当前页码值大于最大页码值，使用最大页码值作为当前页码值重新查询；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分页</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize)</span>&#123;</span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage,pageSize);</span><br><span class="line">    <span class="comment">// 如果当前页码值大于总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; page.getPages()) &#123;</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>) page.getPages(),pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="5-7-条件查询"><a href="#5-7-条件查询" class="headerlink" title="5.7 条件查询"></a>5.7 条件查询</h5><ul>
<li><p>查询条件数据封装</p>
<ul>
<li>单独封装</li>
<li>与分页操作混合封装</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">pagination</span>: &#123;<span class="comment">//分页相关模型数据</span></span><br><span class="line">                <span class="attr">currentPage</span>: <span class="number">1</span>,<span class="comment">//当前页码</span></span><br><span class="line">                <span class="attr">pageSize</span>:<span class="number">10</span>,<span class="comment">//每页显示的记录数</span></span><br><span class="line">                <span class="attr">total</span>:<span class="number">0</span>, <span class="comment">//总记录数</span></span><br><span class="line">                <span class="attr">type</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">description</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>页面数据模型绑定(v-model)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;filter-container&quot;&gt;</span><br><span class="line">    &lt;el-input placeholder=&quot;图书类别&quot; v-model=&quot;pagination.type&quot; style=&quot;width: 200px;&quot; class=&quot;filter-item&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;el-input placeholder=&quot;图书名称&quot; v-model=&quot;pagination.name&quot; style=&quot;width: 200px;&quot; class=&quot;filter-item&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;el-input placeholder=&quot;图书描述&quot; v-model=&quot;pagination.description&quot; style=&quot;width: 200px;&quot; class=&quot;filter-item&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">    &lt;el-button @click=&quot;getAll()&quot; class=&quot;dalfBut&quot;&gt;查询&lt;/el-button&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; class=&quot;butT&quot; @click=&quot;handleCreate()&quot;&gt;新建&lt;/el-button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>组织数据成为get 请求发送的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    param = <span class="string">&quot;?query&quot;</span></span><br><span class="line">    param += <span class="string">&quot;&amp;type=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">type</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;name=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">name</span>;</span><br><span class="line">    param += <span class="string">&quot;&amp;description=&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">description</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送异步请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> + <span class="string">&quot;/&quot;</span> + <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> + param).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">size</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">current</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pagination</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">records</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li><p>Controller 接收参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;currentPage&#125;/&#123;pageSize&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="type">int</span> pageSize, Book book)</span>&#123;</span><br><span class="line">    IPage&lt;Book&gt; page = bookService.getPage(currentPage ,pageSize, book);</span><br><span class="line">    <span class="comment">// 如果当前页码值大于总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">    <span class="keyword">if</span> (currentPage &gt; page.getPages()) &#123;</span><br><span class="line">        page = bookService.getPage((<span class="type">int</span>) page.getPages() ,pageSize, book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">R</span>(<span class="literal">true</span>, page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>业务层接口功能开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBookService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Book&gt; &#123;</span><br><span class="line">    IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage,<span class="type">int</span> pageSize, Book book)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BookDao, Book&gt; <span class="keyword">implements</span> <span class="title class_">IBookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Book&gt; <span class="title function_">getPage</span><span class="params">(<span class="type">int</span> currentPage, <span class="type">int</span> pageSize, Book book)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getType()), Book::getType,book.getType());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getName()), Book::getName,book.getName());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(book.getDescription()), Book::getDescription,book.getDescription());</span><br><span class="line">        <span class="type">IPage</span> <span class="variable">page</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(currentPage,pageSize);</span><br><span class="line">        bookDao.selectPage(page,lqw);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h5><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、基于Restful 制作表现层接口；</span><br><span class="line"><span class="bullet">	*</span> 新增：POST</span><br><span class="line"><span class="bullet">	*</span> 删除：DELETE</span><br><span class="line"><span class="bullet">	*</span> 修改：PUT</span><br><span class="line"><span class="bullet">	*</span> 查询：GET</span><br><span class="line">2、接受参数</span><br><span class="line"><span class="bullet">	*</span> 实体数据：@RequestBody</span><br><span class="line"><span class="bullet">	*</span> 路径变量：@PathVariable</span><br><span class="line">3、表现层接口统一返回值</span><br><span class="line"><span class="bullet">	*</span> 设计统一的返回值结果类型便于前端开发读取数据；</span><br><span class="line"><span class="bullet">	*</span> 返回值结果类型可以根据需求自行设定，没有固定格式；</span><br><span class="line"><span class="bullet">	*</span> 返回值结果模型类用于后端与前端进行数据格式统一，也称为前后端数据协议；</span><br><span class="line">4、前后端协议联调</span><br><span class="line"><span class="bullet">	*</span> 单体项目中页面放置在resources/static目录下；</span><br><span class="line"><span class="bullet">	*</span> created 钩子函数用于初始化页面时发起调用；</span><br><span class="line"><span class="bullet">	*</span> 页面使用axios 发送异步请求数据后确认前后端是否联通；</span><br><span class="line"><span class="bullet">	*</span> 将查询数据返回页面，利用前端数据双向绑定进行数据展示；</span><br><span class="line">5、添加</span><br><span class="line"><span class="bullet">	*</span> 请求方式使用POST 调用后台对应操作；</span><br><span class="line"><span class="bullet">	*</span> 添加操作结束后动态刷新页面加载数据；</span><br><span class="line"><span class="bullet">	*</span> 根据操作结果不同，显示对应的提示信息；</span><br><span class="line"><span class="bullet">	*</span> 弹出添加Div 时清除表单数据；</span><br><span class="line">6、删除</span><br><span class="line"><span class="bullet">	*</span> 请求方式使用Delete调用后台对应操作；</span><br><span class="line"><span class="bullet">	*</span> 删除操作需要传递当前数据对应的id 值到后台；</span><br><span class="line"><span class="bullet">	*</span> 删除操作结束后动态刷新页面加载数据；</span><br><span class="line"><span class="bullet">	*</span> 根据操作结果不同，显示对应的提示信息；</span><br><span class="line"><span class="bullet">	*</span> 删除操作前弹出提示框避免误操作；</span><br><span class="line">7、修改</span><br><span class="line"><span class="bullet">	*</span> 加载要修改数据通过传递当前行数据对应的id 值到后台；</span><br><span class="line"><span class="bullet">	*</span> 利用前端数据双向绑定，将查询到的数据进行回显；</span><br><span class="line"><span class="bullet">	*</span> 请求方式使用PUT 调用后台对应操作；</span><br><span class="line"><span class="bullet">	*</span> 修改操作结束后动态刷新页面加载数据；</span><br><span class="line"><span class="bullet">	*</span> 根据操作结果不同，显示对应的提示信息；</span><br><span class="line">8、业务消息一致性处理</span><br><span class="line"><span class="bullet">	*</span> 使用注解@RestControllerAdvice 定义SpringMVC 异常处理器用来处理异常的；</span><br><span class="line"><span class="bullet">	*</span> 异常处理器必须被扫描加载，否则无法生效；</span><br><span class="line"><span class="bullet">	*</span> 表现层返回结果的 模型类中添加消息属性用来传递消息到页面；</span><br><span class="line">9、分页功能</span><br><span class="line"><span class="bullet">	*</span> 使用el分页组件；</span><br><span class="line"><span class="bullet">	*</span> 定义分页组件绑定的数据模型；</span><br><span class="line"><span class="bullet">	*</span> 异步调用获取分页数据；</span><br><span class="line"><span class="bullet">	*</span> 分页数据页面回显；</span><br><span class="line">10、条件查询</span><br><span class="line"><span class="bullet">	*</span> 定义查询条件数据模型（当前封装到分页数据模型中）；</span><br><span class="line"><span class="bullet">	*</span> 异步调用分页功能并通过请求参数传递数据到后台；</span><br></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、pom.xml</span><br><span class="line"><span class="code">	配置起步依赖；</span></span><br><span class="line"><span class="code">2、application.yml</span></span><br><span class="line"><span class="code">	设置数据源、端口、框架技术相关配置等；</span></span><br><span class="line"><span class="code">3、dao</span></span><br><span class="line"><span class="code">	继承BaseMapper、设置@Mapper；</span></span><br><span class="line"><span class="code">4、dao测试类</span></span><br><span class="line"><span class="code">5、service</span></span><br><span class="line"><span class="code">	调用数据层接口或MyBatis-Plus 提供的接口快速开发；</span></span><br><span class="line"><span class="code">6、service测试类</span></span><br><span class="line"><span class="code">7、controller</span></span><br><span class="line"><span class="code">	基于Restful 开发，使用Postman 测试页面请求功能；</span></span><br><span class="line"><span class="code">8、页面</span></span><br><span class="line"><span class="code">	放置在resources 目录下的static 目录中；</span></span><br></pre></td></tr></table></figure>



<h2 id="运维实用篇"><a href="#运维实用篇" class="headerlink" title="运维实用篇"></a>运维实用篇</h2><h3 id="01-工程打包与运行"><a href="#01-工程打包与运行" class="headerlink" title="01 工程打包与运行"></a>01 工程打包与运行</h3><h5 id="1-程序为什么要打包"><a href="#1-程序为什么要打包" class="headerlink" title="1. 程序为什么要打包"></a>1. 程序为什么要打包</h5><ul>
<li>SpringBoot 工程可以基于 Java 环境 下独立运行 jar 文件启动服务；</li>
</ul>
<h5 id="2-SpringBoot-项目快速启动（Windows版）"><a href="#2-SpringBoot-项目快速启动（Windows版）" class="headerlink" title="2. SpringBoot 项目快速启动（Windows版）"></a>2. SpringBoot 项目快速启动（Windows版）</h5><ul>
<li><p>对 SpringBoot 项目打包（执行 Maven 构建指令 package）</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure></li>
<li><p>运行项目（执行启动指令）cmd 中</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">java -jar 对应工程的工程名.jar</span><br></pre></td></tr></table></figure></li>
<li><p>注意事项</p>
<ul>
<li>jar 支持命令行启动需要依赖 maven 插件支持，请确认打包时是否具有 SpringBoot 对应的 maven 插件；</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-命令行启动常见问题及解决方案"><a href="#3-命令行启动常见问题及解决方案" class="headerlink" title="3. 命令行启动常见问题及解决方案"></a>3. 命令行启动常见问题及解决方案</h5><ul>
<li><p>Windows 端口被占用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"><span class="comment"># 查询指定端口</span></span><br><span class="line">netstat -ano | findstr <span class="string">&quot;端口号&quot;</span></span><br><span class="line"><span class="comment"># 根据进程 PID 查询进程名称</span></span><br><span class="line">tasklist | findstr <span class="string">&quot;进程 PID 号&quot;</span></span><br><span class="line"><span class="comment"># 根据 PID 杀死任务</span></span><br><span class="line">taskkill -f -pid <span class="string">&quot;进程 PID 号&quot;</span></span><br><span class="line"><span class="comment"># 根据进程名称杀死任务</span></span><br><span class="line">taskkill -f - t -im <span class="string">&quot;进程名称&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、Boot 程序打包依赖 SpringBoot 对应的 Maven 插件即可打包出可执行的 jar 包；</span><br><span class="line">2、运行 jar 包 使用 java -jar 命令进行；</span><br><span class="line">3、Windows 与 Linux 下执行 Boot 打包程序流程相同，仅需确保运行环境有效即可；</span><br></pre></td></tr></table></figure>



<h3 id="02-配置高级"><a href="#02-配置高级" class="headerlink" title="02 配置高级"></a>02 配置高级</h3><h4 id="01-临时属性设置"><a href="#01-临时属性设置" class="headerlink" title="01 临时属性设置"></a>01 临时属性设置</h4><h5 id="1-临时属性设置"><a href="#1-临时属性设置" class="headerlink" title="1.临时属性设置"></a>1.临时属性设置</h5><ul>
<li><p>带属性启动 SpringBoot；</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">java -jar springboot.jar --server.port=80</span><br></pre></td></tr></table></figure></li>
<li><p>携带多个属性启动 SpringBoot,属性间使用空格分隔；</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">java -jar springboot.jar --server.port=80 --spring.datasource.druid.password=123</span><br></pre></td></tr></table></figure></li>
<li><p>属性加载优先级顺序</p>
<p><img src="C:\Users\lightchun\AppData\Roaming\Typora\typora-user-images\image-20230304192836161.png" alt="image-20230304192836161"></p>
</li>
</ul>
<h5 id="2-临时属性设置（开发环境）"><a href="#2-临时属性设置（开发环境）" class="headerlink" title="2. 临时属性设置（开发环境）"></a>2. 临时属性设置（开发环境）</h5><ul>
<li><p>通过编程形式带参数启动 SpringBoot 程序，为程序添加运行参数；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSMPApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String[] arg = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">        arg[<span class="number">0</span>] = <span class="string">&quot;--server.port=8081&quot;</span>;</span><br><span class="line">		SpringApplication.run(SSMPApplication.class, arg);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>不携带参数启动 SpringBoot 程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SSMPApplication</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="comment">// 可以在启动 boot 程序时断开读取外部临时配置对应的入口，也就是去掉读取外部参数的形参 =&gt; 安全性</span></span><br><span class="line">		SpringApplication.run(SSMPApplication.class);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="3-配置文件分类"><a href="#3-配置文件分类" class="headerlink" title="3. 配置文件分类"></a>3. 配置文件分类</h5><ul>
<li>SpringBoot 中 4 级配置文件<ul>
<li>1 级：file：config/application.yml  <strong>[最高]</strong> =&gt; 运维经理</li>
<li>2 级：file：application.yml =&gt; 运维人员</li>
<li>3 级：classpath：config/application.yml  =&gt; 项目经理</li>
<li>4 级：classpath：application.yml  <strong>[最低]</strong> =&gt; 程序员</li>
</ul>
</li>
<li>作用<ul>
<li>1 级与 2 级留做<strong>系统打包后</strong>设置通用属性，1 级常用于运维经理进行整体项目部署方案调控；</li>
<li>3 级与 4 级留做<strong>系统开发阶段</strong>设置通用属性，3 级常用于项目经理进行整体项目属性调控；</li>
</ul>
</li>
</ul>
<h5 id="4-自定义配置文件-——-重要说明"><a href="#4-自定义配置文件-——-重要说明" class="headerlink" title="4. 自定义配置文件 —— 重要说明"></a>4. 自定义配置文件 —— 重要说明</h5><ul>
<li>单服务器项目：使用自定义配置文件需求较低；</li>
<li>多服务器项目：使用自定义配置文件需求较高，将所有配置放置在一个目录中，统一管理；</li>
<li>基于 SpringCloud 技术，所有的服务器将不再设置配置文件，而是通过<strong>配置中心</strong>进行设定，动态加载配置信息；</li>
</ul>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、临时属性设置</span><br><span class="line"><span class="bullet">	*</span> 使用 jar 命令启动 SpringBoot 工程时可以使用临时属性替换配置文件中的属性；</span><br><span class="line"><span class="bullet">	*</span> 临时属性添加方式： java -jar 工程名.jar --属性名=值；</span><br><span class="line"><span class="bullet">	*</span> 多个临时属性之间使用空格分隔；</span><br><span class="line"><span class="bullet">	*</span> 临时属性必须是当前 boot 工程支持的属性，否则设置无效；</span><br><span class="line">2、配置文件分类</span><br><span class="line"><span class="bullet">	*</span> 配置文件分为 4 种</span><br><span class="line"><span class="bullet">		-</span> 项目类路径配置文件：服务于开发人员本机开发测试；</span><br><span class="line"><span class="bullet">		-</span> 项目类路径 config 目录中配置文件：服务于项目经理整体调控；</span><br><span class="line"><span class="bullet">		-</span> 工程路径配置文件：服务于运维人员配置涉密线上环境；</span><br><span class="line"><span class="bullet">		-</span> 工程路径 config 目录中配置文件：服务于运维经理整体调控；</span><br><span class="line"><span class="bullet">	*</span> 多层级配置文件间的属性采用叠加并覆盖的形式作用于程序；</span><br><span class="line">3、配置总结</span><br><span class="line"><span class="bullet">	*</span> SpringBoot 在开发和运行环境均支持使用临时参数修改工程配置；</span><br><span class="line"><span class="bullet">	*</span> SpringBoot 支持 4 级配置文件，应用于开发与线上环境进行配置的灵活设置；</span><br><span class="line"><span class="bullet">	*</span> SpringBoot 支持使用自定义配置文件的形式修改配置文件存储位置；</span><br><span class="line"><span class="bullet">	*</span> 基于微服务开发时配置文件将使用配置中心进行管理；</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="03-多环境开发"><a href="#03-多环境开发" class="headerlink" title="03 多环境开发"></a>03 多环境开发</h3>]]></content>
  </entry>
</search>
