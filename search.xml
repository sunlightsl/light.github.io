<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>algorithm_binarySearch</title>
    <url>/2022/11/27/algorithm-binarySearch/</url>
    <content><![CDATA[<h2 id="算法-二分查找"><a href="#算法-二分查找" class="headerlink" title="算法 - 二分查找"></a>算法 - 二分查找</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th align="center">最好</th>
<th align="center">平均</th>
<th align="center">最坏</th>
</tr>
</thead>
<tbody><tr>
<td align="center">O(1)</td>
<td align="center">O(logn)</td>
<td align="center">O(n)</td>
</tr>
</tbody></table>
<h3 id="算法实现-文字描述"><a href="#算法实现-文字描述" class="headerlink" title="算法实现 - 文字描述"></a>算法实现 - 文字描述</h3><span id="more"></span>
<ul>
<li>前提：已排序的数组A；</li>
<li>定义左边界L，右边界R，确定搜索范围，循环执行二分查找（3，4步）；</li>
<li>获取中间索引M = (L + R) &gt;&gt;&gt; 1;</li>
<li>中间索引的值A[M] 与待搜索的值T 进行比较<ul>
<li>A[M] == T 表示找到，返回中间索引。</li>
<li>A[M] &gt; T 中间值右侧的其他元素都大于T，无需比较，中间索引左边去找， M - 1设置为右边界，重新查找；</li>
<li>A[M] &gt; T 中间值右侧的其他元素都小T，无需比较，中间索引右边去找， M + 1设置为左边界，重新查找；</li>
</ul>
</li>
<li>当L &gt; R 时，表示没有找到，应结束循环；</li>
</ul>
<h3 id="算法实现-代码实现"><a href="#算法实现-代码实现" class="headerlink" title="算法实现 - 代码实现"></a>算法实现 - 代码实现</h3><h4 id="输入：一个有序的数组-a，一个待查找的值-t"><a href="#输入：一个有序的数组-a，一个待查找的值-t" class="headerlink" title="输入：一个有序的数组 a，一个待查找的值 t"></a>输入：一个有序的数组 a，一个待查找的值 t</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> t)</span> &#123;    </span><br><span class="line">    <span class="comment">//l 为左指针，r为右指针，m为中间指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = a.length - <span class="number">1</span>, m;    </span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;        </span><br><span class="line">        m = (l + r) &gt;&gt;&gt; <span class="number">1</span>;  <span class="comment">//使用移位可以避免整数溢出问题     </span></span><br><span class="line">        <span class="keyword">if</span> (a[m] == t) &#123;            </span><br><span class="line">             <span class="keyword">return</span> m;       </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[m] &gt; t) &#123;            </span><br><span class="line">            r = m - <span class="number">1</span>;       </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            l = m + <span class="number">1</span>;       </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="二分查找有诸多变体，一旦使用变体实现代码，则左右边界的选取会有变化，进而会影响中间过程的推算（手动推算时）"><a href="#二分查找有诸多变体，一旦使用变体实现代码，则左右边界的选取会有变化，进而会影响中间过程的推算（手动推算时）" class="headerlink" title="二分查找有诸多变体，一旦使用变体实现代码，则左右边界的选取会有变化，进而会影响中间过程的推算（手动推算时）"></a>二分查找有诸多变体，一旦使用变体实现代码，则左右边界的选取会有变化，进而会影响中间过程的推算（手动推算时）</h4>]]></content>
      <categories>
        <category>算法（algorithm）</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法（algorithm）</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>algorithm_bubble</title>
    <url>/2022/11/27/algorithm-bubble/</url>
    <content><![CDATA[<h2 id="算法-冒泡排序"><a href="#算法-冒泡排序" class="headerlink" title="算法 - 冒泡排序"></a>算法 - 冒泡排序</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><table>
<thead>
<tr>
<th align="center">最好</th>
<th align="center">平均</th>
<th align="center">最坏</th>
</tr>
</thead>
<tbody><tr>
<td align="center">O( n^2)</td>
<td align="center">O(n^2)</td>
<td align="center">O(n^2)</td>
</tr>
</tbody></table>
<h3 id="算法实现-文字描述"><a href="#算法实现-文字描述" class="headerlink" title="算法实现 - 文字描述"></a>算法实现 - 文字描述</h3><span id="more"></span>
<h4 id="以升序为例"><a href="#以升序为例" class="headerlink" title="以升序为例"></a>以升序为例</h4><ul>
<li>依次比较数组中相邻两个元素大小，若a[j] &gt; a[j+1],则交换两个元素。两两都比较一遍称一轮冒泡，结果是让最大的元素排至最后。</li>
<li>重复以上步骤，直到整个数组有序。</li>
</ul>
<h4 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h4><ul>
<li>每轮冒泡时，最后一次交换索引，可以作为下一轮冒泡的比较次数，如果这个值为零（0），表示整个数组有序，直接退出外层循环即可。</li>
</ul>
<h3 id="算法实现-代码实现"><a href="#算法实现-代码实现" class="headerlink" title="算法实现 - 代码实现"></a>算法实现 - 代码实现</h3><h4 id="输入：一个需要排序的数组-a，swap-为数组a中-第i个元素与第j个元素交换（提取出来共用）。"><a href="#输入：一个需要排序的数组-a，swap-为数组a中-第i个元素与第j个元素交换（提取出来共用）。" class="headerlink" title="输入：一个需要排序的数组 a，swap() 为数组a中 第i个元素与第j个元素交换（提取出来共用）。"></a>输入：一个需要排序的数组 a，swap() 为数组a中 第i个元素与第j个元素交换（提取出来共用）。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> a[j];</span><br><span class="line">    a[i] = a[j];</span><br><span class="line">    a[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="此-bubble-为最终改进后的冒泡排序方法。对原算法进行了改进，上次的小优化仍有改进空间，即优化方式所述。"><a href="#此-bubble-为最终改进后的冒泡排序方法。对原算法进行了改进，上次的小优化仍有改进空间，即优化方式所述。" class="headerlink" title="此 bubble() 为最终改进后的冒泡排序方法。对原算法进行了改进，上次的小优化仍有改进空间，即优化方式所述。"></a>此 bubble() 为最终改进后的冒泡排序方法。对原算法进行了改进，上次的小优化仍有改进空间，即优化方式所述。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length - <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">while</span> (!n == <span class="number">0</span>) &#123;      </span><br><span class="line">       <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//记录最后一次交换索引位置</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            swap(a, i, i+<span class="number">1</span>);</span><br><span class="line">            last = i;  <span class="comment">//得到前一个索引，即交换前的索引</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       n = last;  <span class="comment">//更新比较的次数及退出条件</span></span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="初次代码"><a href="#初次代码" class="headerlink" title="初次代码"></a>初次代码</h3><h4 id="存在数据已排序完成，但仍会继续执行冒泡代码块，浪费时间和资源"><a href="#存在数据已排序完成，但仍会继续执行冒泡代码块，浪费时间和资源" class="headerlink" title="存在数据已排序完成，但仍会继续执行冒泡代码块，浪费时间和资源"></a>存在数据已排序完成，但仍会继续执行冒泡代码块，浪费时间和资源</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length - <span class="number">1</span>; j++) &#123;   </span><br><span class="line">       <span class="comment">//一轮冒泡</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            swap(a, i, i+<span class="number">1</span>);</span><br><span class="line">            last = i;  <span class="comment">//得到前一个索引，即交换前的索引</span></span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="初次代码进行小优化"><a href="#初次代码进行小优化" class="headerlink" title="初次代码进行小优化"></a>初次代码进行小优化</h3><h4 id="因初次代码，存在数据已排序完成，但仍会继续执行冒泡代码块，修改方向：当有一轮数据不再交换时，则说明已排序完成。无需继续执行。"><a href="#因初次代码，存在数据已排序完成，但仍会继续执行冒泡代码块，修改方向：当有一轮数据不再交换时，则说明已排序完成。无需继续执行。" class="headerlink" title="因初次代码，存在数据已排序完成，但仍会继续执行冒泡代码块，修改方向：当有一轮数据不再交换时，则说明已排序完成。无需继续执行。"></a>因初次代码，存在数据已排序完成，但仍会继续执行冒泡代码块，修改方向：当有一轮数据不再交换时，则说明已排序完成。无需继续执行。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubble</span><span class="params">(<span class="type">int</span>[] a)</span> &#123;    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length - <span class="number">1</span>; j++) &#123;   </span><br><span class="line">       <span class="comment">//一轮冒泡</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length - <span class="number">1</span> - j; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &gt; a[i+<span class="number">1</span>]) &#123;</span><br><span class="line">            swap(a, i, i+<span class="number">1</span>);</span><br><span class="line">            swapped = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//如果不交换，则说明已经排序完成，无需继续进行冒泡</span></span><br><span class="line">       <span class="keyword">if</span> (!swapped) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法（algorithm）</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>算法（algorithm）</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/11/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span> 

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/11/27/test/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>个人网站</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Git</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
</search>
